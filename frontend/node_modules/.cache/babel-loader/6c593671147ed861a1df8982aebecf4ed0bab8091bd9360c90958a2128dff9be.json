{"ast":null,"code":"var _jsxFileName = \"D:\\\\1\\\\InterviewTask\\\\frontend\\\\src\\\\components\\\\Dashboard.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// import React, { useState, useEffect } from \"react\";\n// import axios from \"axios\";\n// import \"./Dashboard.css\";\n// import { useLocation } from \"react-router-dom\";\n\n// const Dashboard = () => {\n//   const [formData, setFormData] = useState({\n//     type: \"income\", // Default type is income\n//     amount: \"\",\n//     description: \"\",\n//   });\n//   const [errors, setErrors] = useState({});\n//   //const navigate = useNavigate();\n//   const location = useLocation();\n//   const { record } = location.state || {};\n\n//   useEffect(() => {\n//     if (record) {\n//       // If record data is passed, populate the form fields with it\n//       setFormData({\n//         type: record.type,\n//         amount: record.amount,\n//         description: record.description,\n//       });\n//     }\n//   }, [record]);\n//   const handleChange = (e) => {\n//     const { name, value } = e.target;\n//     setFormData((prevData) => ({\n//       ...prevData,\n//       [name]: value,\n//     }));\n//     setErrors((prevErrors) => ({\n//       ...prevErrors,\n//       [name]: \"\", // Clear error message when user starts typing\n//     }));\n//   };\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n\n//     // Perform client-side validation\n//     const validationErrors = {};\n//     if (!formData.amount) {\n//       validationErrors.amount = \"Amount is required\";\n//     } else if (!/^\\d+(\\.\\d{1,2})?$/.test(formData.amount)) {\n//       validationErrors.amount = \"Invalid amount format\";\n//     }\n//     if (!formData.description) {\n//       validationErrors.description = \"Description is required\";\n//     }\n//     if (Object.keys(validationErrors).length > 0) {\n//       setErrors(validationErrors);\n//       return;\n//     }\n\n//     try {\n//       const token = localStorage.getItem(\"token\");\n\n//       // Include token in request headers\n//       const config = {\n//         headers: {\n//           Authorization: `Bearer ${token}`,\n//         },\n//       };\n\n//       if (record) {\n//         // If record data is passed, call the update API (PUT)\n//         await axios.put(\n//           `http://localhost:3001/api/recordsUp/${record._id}`,\n//           formData,\n//           config\n//         );\n//         // Show success message for update\n//         alert(\"Record updated successfully!\");\n//       } else {\n//         // If no record data is passed, call the create API (POST)\n//         const response = await axios.post(\n//           \"http://localhost:3001/api/records\",\n//           formData,\n//           config\n//         );\n//         // Show success message for add\n//         console.log(\"Response:\", response.data);\n//         alert(\"Record added successfully!\");\n//       }\n\n//       // Reset form data after successful submission\n//       setFormData({\n//         type: \"income\", // Reset type to income\n//         amount: \"\",\n//         description: \"\",\n//       });\n//     } catch (error) {\n//       console.error(\"Error:\", error);\n//       if (error.response && error.response.data && error.response.data.error) {\n//         alert(error.response.data.error);\n//       } else {\n//         alert(\"An error occurred. Please try again later.\");\n//       }\n//     }\n//   };\n\n//   return (\n//     <div className=\"dashboard-container\">\n//       <h2>{record ? \"Update Record\" : \"Add Record\"}</h2>\n//       <form onSubmit={handleSubmit} className=\"record-form\">\n//         <div className=\"form-group\">\n//           <label htmlFor=\"type\">Type:</label>\n//           <select\n//             id=\"type\"\n//             name=\"type\"\n//             value={formData.type}\n//             onChange={handleChange}\n//           >\n//             <option value=\"income\">Income</option>\n//             <option value=\"expense\">Expense</option>\n//           </select>\n//         </div>\n//         <div className=\"form-group\">\n//           <label htmlFor=\"amount\">Amount:</label>\n//           <input\n//             type=\"text\"\n//             id=\"amount\"\n//             name=\"amount\"\n//             value={formData.amount}\n//             onChange={handleChange}\n//             required\n//           />\n//           {errors.amount && <span className=\"error\">{errors.amount}</span>}\n//         </div>\n//         <div className=\"form-group\">\n//           <label htmlFor=\"description\">Description:</label>\n//           <input\n//             type=\"text\"\n//             id=\"description\"\n//             name=\"description\"\n//             value={formData.description}\n//             onChange={handleChange}\n//             required\n//           />\n//           {errors.description && (\n//             <span className=\"error\">{errors.description}</span>\n//           )}\n//         </div>\n//         <button type=\"submit\">{record ? \"Update\" : \"Submit\"}</button>\n//       </form>\n//     </div>\n//   );\n// };\n\n// export default Dashboard;\n\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport \"./Dashboard.css\";\nimport { useLocation, useNavigate } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useRequireAuth = () => {\n  _s();\n  const navigate = useNavigate();\n  const token = localStorage.getItem(\"token\");\n  useEffect(() => {\n    if (!token) {\n      // If token does not exist, redirect to login page\n      navigate(\"/login\");\n    }\n  }, [token, navigate]);\n  return token;\n};\n_s(useRequireAuth, \"0pNeyzXk/ByIxyERsdaIrG6js9s=\", false, function () {\n  return [useNavigate];\n});\nconst Dashboard = () => {\n  _s2();\n  const [formData, setFormData] = useState({\n    type: \"income\",\n    // Default type is income\n    amount: \"\",\n    description: \"\"\n  });\n  const [errors, setErrors] = useState({});\n  const location = useLocation();\n  const {\n    record\n  } = location.state || {};\n  const token = useRequireAuth(); // Custom hook for authentication\n\n  useEffect(() => {\n    if (record) {\n      // If record data is passed, populate the form fields with it\n      setFormData({\n        type: record.type,\n        amount: record.amount,\n        description: record.description\n      });\n    }\n  }, [record]);\n  const handleChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setFormData(prevData => ({\n      ...prevData,\n      [name]: value\n    }));\n    setErrors(prevErrors => ({\n      ...prevErrors,\n      [name]: \"\" // Clear error message when user starts typing\n    }));\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n\n    // Perform client-side validation\n    const validationErrors = {};\n    if (!formData.amount) {\n      validationErrors.amount = \"Amount is required\";\n    } else if (!/^\\d+(\\.\\d{1,2})?$/.test(formData.amount)) {\n      validationErrors.amount = \"Invalid amount format\";\n    }\n    if (!formData.description) {\n      validationErrors.description = \"Description is required\";\n    }\n    if (Object.keys(validationErrors).length > 0) {\n      setErrors(validationErrors);\n      return;\n    }\n    try {\n      // Include token in request headers\n      const config = {\n        headers: {\n          Authorization: `Bearer ${token}`,\n          \"Content-Type\": \"application/json\"\n        }\n      };\n      if (record) {\n        // If record data is passed, call the update API (PUT)\n        console.log(`Updating record with ID: ${record.id}`);\n        const response = await axios.put(`http://localhost:3000/api/records/${record.id}`, formData, config);\n        // Show success message for update\n        console.log(\"Update Response:\", response.data);\n        alert(\"Record updated successfully!\");\n      } else {\n        // If no record data is passed, call the create API (POST)\n        const response = await axios.post(\"http://localhost:3000/api/records\", formData, config);\n        // Show success message for add\n        console.log(\"Response:\", response.data);\n        alert(\"Record added successfully!\");\n      }\n\n      // Reset form data after successful submission\n      setFormData({\n        type: \"income\",\n        // Reset type to income\n        amount: \"\",\n        description: \"\"\n      });\n    } catch (error) {\n      console.error(\"Error:\", error);\n      if (error.response && error.response.data && error.response.data.error) {\n        alert(error.response.data.error);\n      } else {\n        alert(\"An error occurred. Please try again later.\");\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dashboard-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: record ? \"Update Record\" : \"Add Record\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 275,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      className: \"record-form\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"type\",\n          children: \"Type:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 278,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          id: \"type\",\n          name: \"type\",\n          value: formData.type,\n          onChange: handleChange,\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"income\",\n            children: \"Income\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 285,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"expense\",\n            children: \"Expense\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 286,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 279,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"amount\",\n          children: \"Amount:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 290,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"amount\",\n          name: \"amount\",\n          value: formData.amount,\n          onChange: handleChange,\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 291,\n          columnNumber: 11\n        }, this), errors.amount && /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"error\",\n          children: errors.amount\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 299,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 289,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"description\",\n          children: \"Description:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 302,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"description\",\n          name: \"description\",\n          value: formData.description,\n          onChange: handleChange,\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 303,\n          columnNumber: 11\n        }, this), errors.description && /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"error\",\n          children: errors.description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 312,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 301,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: record ? \"Update\" : \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 315,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 276,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 274,\n    columnNumber: 5\n  }, this);\n};\n_s2(Dashboard, \"rdlcbDBYWpt7A/OlZc/uPElneaQ=\", false, function () {\n  return [useLocation, useRequireAuth];\n});\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useState","useEffect","axios","useLocation","useNavigate","jsxDEV","_jsxDEV","useRequireAuth","_s","navigate","token","localStorage","getItem","Dashboard","_s2","formData","setFormData","type","amount","description","errors","setErrors","location","record","state","handleChange","e","name","value","target","prevData","prevErrors","handleSubmit","preventDefault","validationErrors","test","Object","keys","length","config","headers","Authorization","console","log","id","response","put","data","alert","post","error","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","htmlFor","onChange","required","_c","$RefreshReg$"],"sources":["D:/1/InterviewTask/frontend/src/components/Dashboard.js"],"sourcesContent":["// import React, { useState, useEffect } from \"react\";\r\n// import axios from \"axios\";\r\n// import \"./Dashboard.css\";\r\n// import { useLocation } from \"react-router-dom\";\r\n\r\n// const Dashboard = () => {\r\n//   const [formData, setFormData] = useState({\r\n//     type: \"income\", // Default type is income\r\n//     amount: \"\",\r\n//     description: \"\",\r\n//   });\r\n//   const [errors, setErrors] = useState({});\r\n//   //const navigate = useNavigate();\r\n//   const location = useLocation();\r\n//   const { record } = location.state || {};\r\n\r\n//   useEffect(() => {\r\n//     if (record) {\r\n//       // If record data is passed, populate the form fields with it\r\n//       setFormData({\r\n//         type: record.type,\r\n//         amount: record.amount,\r\n//         description: record.description,\r\n//       });\r\n//     }\r\n//   }, [record]);\r\n//   const handleChange = (e) => {\r\n//     const { name, value } = e.target;\r\n//     setFormData((prevData) => ({\r\n//       ...prevData,\r\n//       [name]: value,\r\n//     }));\r\n//     setErrors((prevErrors) => ({\r\n//       ...prevErrors,\r\n//       [name]: \"\", // Clear error message when user starts typing\r\n//     }));\r\n//   };\r\n\r\n//   const handleSubmit = async (e) => {\r\n//     e.preventDefault();\r\n\r\n//     // Perform client-side validation\r\n//     const validationErrors = {};\r\n//     if (!formData.amount) {\r\n//       validationErrors.amount = \"Amount is required\";\r\n//     } else if (!/^\\d+(\\.\\d{1,2})?$/.test(formData.amount)) {\r\n//       validationErrors.amount = \"Invalid amount format\";\r\n//     }\r\n//     if (!formData.description) {\r\n//       validationErrors.description = \"Description is required\";\r\n//     }\r\n//     if (Object.keys(validationErrors).length > 0) {\r\n//       setErrors(validationErrors);\r\n//       return;\r\n//     }\r\n\r\n//     try {\r\n//       const token = localStorage.getItem(\"token\");\r\n\r\n//       // Include token in request headers\r\n//       const config = {\r\n//         headers: {\r\n//           Authorization: `Bearer ${token}`,\r\n//         },\r\n//       };\r\n\r\n//       if (record) {\r\n//         // If record data is passed, call the update API (PUT)\r\n//         await axios.put(\r\n//           `http://localhost:3001/api/recordsUp/${record._id}`,\r\n//           formData,\r\n//           config\r\n//         );\r\n//         // Show success message for update\r\n//         alert(\"Record updated successfully!\");\r\n//       } else {\r\n//         // If no record data is passed, call the create API (POST)\r\n//         const response = await axios.post(\r\n//           \"http://localhost:3001/api/records\",\r\n//           formData,\r\n//           config\r\n//         );\r\n//         // Show success message for add\r\n//         console.log(\"Response:\", response.data);\r\n//         alert(\"Record added successfully!\");\r\n//       }\r\n\r\n//       // Reset form data after successful submission\r\n//       setFormData({\r\n//         type: \"income\", // Reset type to income\r\n//         amount: \"\",\r\n//         description: \"\",\r\n//       });\r\n//     } catch (error) {\r\n//       console.error(\"Error:\", error);\r\n//       if (error.response && error.response.data && error.response.data.error) {\r\n//         alert(error.response.data.error);\r\n//       } else {\r\n//         alert(\"An error occurred. Please try again later.\");\r\n//       }\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"dashboard-container\">\r\n//       <h2>{record ? \"Update Record\" : \"Add Record\"}</h2>\r\n//       <form onSubmit={handleSubmit} className=\"record-form\">\r\n//         <div className=\"form-group\">\r\n//           <label htmlFor=\"type\">Type:</label>\r\n//           <select\r\n//             id=\"type\"\r\n//             name=\"type\"\r\n//             value={formData.type}\r\n//             onChange={handleChange}\r\n//           >\r\n//             <option value=\"income\">Income</option>\r\n//             <option value=\"expense\">Expense</option>\r\n//           </select>\r\n//         </div>\r\n//         <div className=\"form-group\">\r\n//           <label htmlFor=\"amount\">Amount:</label>\r\n//           <input\r\n//             type=\"text\"\r\n//             id=\"amount\"\r\n//             name=\"amount\"\r\n//             value={formData.amount}\r\n//             onChange={handleChange}\r\n//             required\r\n//           />\r\n//           {errors.amount && <span className=\"error\">{errors.amount}</span>}\r\n//         </div>\r\n//         <div className=\"form-group\">\r\n//           <label htmlFor=\"description\">Description:</label>\r\n//           <input\r\n//             type=\"text\"\r\n//             id=\"description\"\r\n//             name=\"description\"\r\n//             value={formData.description}\r\n//             onChange={handleChange}\r\n//             required\r\n//           />\r\n//           {errors.description && (\r\n//             <span className=\"error\">{errors.description}</span>\r\n//           )}\r\n//         </div>\r\n//         <button type=\"submit\">{record ? \"Update\" : \"Submit\"}</button>\r\n//       </form>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default Dashboard;\r\n\r\nimport React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport \"./Dashboard.css\";\r\nimport { useLocation, useNavigate } from \"react-router-dom\";\r\n\r\nconst useRequireAuth = () => {\r\n  const navigate = useNavigate();\r\n  const token = localStorage.getItem(\"token\");\r\n\r\n  useEffect(() => {\r\n    if (!token) {\r\n      // If token does not exist, redirect to login page\r\n      navigate(\"/login\");\r\n    }\r\n  }, [token, navigate]);\r\n\r\n  return token;\r\n};\r\n\r\nconst Dashboard = () => {\r\n  const [formData, setFormData] = useState({\r\n    type: \"income\", // Default type is income\r\n    amount: \"\",\r\n    description: \"\",\r\n  });\r\n  const [errors, setErrors] = useState({});\r\n  const location = useLocation();\r\n  const { record } = location.state || {};\r\n  const token = useRequireAuth(); // Custom hook for authentication\r\n\r\n  useEffect(() => {\r\n    if (record) {\r\n      // If record data is passed, populate the form fields with it\r\n      setFormData({\r\n        type: record.type,\r\n        amount: record.amount,\r\n        description: record.description,\r\n      });\r\n    }\r\n  }, [record]);\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setFormData((prevData) => ({\r\n      ...prevData,\r\n      [name]: value,\r\n    }));\r\n    setErrors((prevErrors) => ({\r\n      ...prevErrors,\r\n      [name]: \"\", // Clear error message when user starts typing\r\n    }));\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n\r\n    // Perform client-side validation\r\n    const validationErrors = {};\r\n    if (!formData.amount) {\r\n      validationErrors.amount = \"Amount is required\";\r\n    } else if (!/^\\d+(\\.\\d{1,2})?$/.test(formData.amount)) {\r\n      validationErrors.amount = \"Invalid amount format\";\r\n    }\r\n    if (!formData.description) {\r\n      validationErrors.description = \"Description is required\";\r\n    }\r\n    if (Object.keys(validationErrors).length > 0) {\r\n      setErrors(validationErrors);\r\n      return;\r\n    }\r\n\r\n    try {\r\n      // Include token in request headers\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${token}`,\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n      };\r\n\r\n      if (record) {\r\n        // If record data is passed, call the update API (PUT)\r\n        console.log(`Updating record with ID: ${record.id}`);\r\n        const response = await axios.put(\r\n          `http://localhost:3000/api/records/${record.id}`,\r\n          formData,\r\n          config\r\n        );\r\n        // Show success message for update\r\n        console.log(\"Update Response:\", response.data);\r\n        alert(\"Record updated successfully!\");\r\n      } else {\r\n        // If no record data is passed, call the create API (POST)\r\n        const response = await axios.post(\r\n          \"http://localhost:3000/api/records\",\r\n          formData,\r\n          config\r\n        );\r\n        // Show success message for add\r\n        console.log(\"Response:\", response.data);\r\n        alert(\"Record added successfully!\");\r\n      }\r\n\r\n      // Reset form data after successful submission\r\n      setFormData({\r\n        type: \"income\", // Reset type to income\r\n        amount: \"\",\r\n        description: \"\",\r\n      });\r\n    } catch (error) {\r\n      console.error(\"Error:\", error);\r\n      if (error.response && error.response.data && error.response.data.error) {\r\n        alert(error.response.data.error);\r\n      } else {\r\n        alert(\"An error occurred. Please try again later.\");\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"dashboard-container\">\r\n      <h2>{record ? \"Update Record\" : \"Add Record\"}</h2>\r\n      <form onSubmit={handleSubmit} className=\"record-form\">\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"type\">Type:</label>\r\n          <select\r\n            id=\"type\"\r\n            name=\"type\"\r\n            value={formData.type}\r\n            onChange={handleChange}\r\n          >\r\n            <option value=\"income\">Income</option>\r\n            <option value=\"expense\">Expense</option>\r\n          </select>\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"amount\">Amount:</label>\r\n          <input\r\n            type=\"text\"\r\n            id=\"amount\"\r\n            name=\"amount\"\r\n            value={formData.amount}\r\n            onChange={handleChange}\r\n            required\r\n          />\r\n          {errors.amount && <span className=\"error\">{errors.amount}</span>}\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"description\">Description:</label>\r\n          <input\r\n            type=\"text\"\r\n            id=\"description\"\r\n            name=\"description\"\r\n            value={formData.description}\r\n            onChange={handleChange}\r\n            required\r\n          />\r\n          {errors.description && (\r\n            <span className=\"error\">{errors.description}</span>\r\n          )}\r\n        </div>\r\n        <button type=\"submit\">{record ? \"Update\" : \"Submit\"}</button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dashboard;\r\n"],"mappings":";;;AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAO,iBAAiB;AACxB,SAASC,WAAW,EAAEC,WAAW,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5D,MAAMC,cAAc,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC3B,MAAMC,QAAQ,GAAGL,WAAW,CAAC,CAAC;EAC9B,MAAMM,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAE3CX,SAAS,CAAC,MAAM;IACd,IAAI,CAACS,KAAK,EAAE;MACV;MACAD,QAAQ,CAAC,QAAQ,CAAC;IACpB;EACF,CAAC,EAAE,CAACC,KAAK,EAAED,QAAQ,CAAC,CAAC;EAErB,OAAOC,KAAK;AACd,CAAC;AAACF,EAAA,CAZID,cAAc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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}